// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package http

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Event defines model for Event.
type Event struct {
	Date  *time.Time `json:"date,omitempty"`
	Id    *int64     `json:"id,omitempty"`
	Title *string    `json:"title,omitempty"`
}

// Events defines model for Events.
type Events = []Event

// Nullable defines model for Nullable.
type Nullable struct {
	Exist *bool `json:"exist,omitempty"`
}

// Participant defines model for Participant.
type Participant struct {
	CheckIn      *Nullable    `json:"check-in,omitempty"`
	Confirmation *Nullable    `json:"confirmation,omitempty"`
	EventId      *int64       `json:"event_id,omitempty"`
	FirstName    *string      `json:"first_name,omitempty"`
	Id           *int64       `json:"id,omitempty"`
	LastName     *string      `json:"last_name,omitempty"`
	MiddleName   *string      `json:"middle_name,omitempty"`
	Phone        *string      `json:"phone,omitempty"`
	Replacement  *Replacement `json:"replacement,omitempty"`
}

// Participants defines model for Participants.
type Participants struct {
	Participants *[]Participant `json:"participants,omitempty"`
	Statistics   *Statistics    `json:"statistics,omitempty"`
}

// Person defines model for Person.
type Person struct {
	FirstName  *string `json:"first_name,omitempty"`
	LastName   *string `json:"last_name,omitempty"`
	MiddleName *string `json:"middle_name,omitempty"`
	Phone      *string `json:"phone,omitempty"`
}

// Replacement defines model for Replacement.
type Replacement struct {
	Exist      *bool   `json:"exist,omitempty"`
	FirstName  *string `json:"first_name,omitempty"`
	LastName   *string `json:"last_name,omitempty"`
	MiddleName *string `json:"middle_name,omitempty"`
	Phone      *string `json:"phone,omitempty"`
}

// Statistics defines model for Statistics.
type Statistics struct {
	CheckedIn    *int64 `json:"checked_in,omitempty"`
	Confirmed    *int64 `json:"confirmed,omitempty"`
	Invited      *int64 `json:"invited,omitempty"`
	NotCheckedIn *int64 `json:"not_checked_in,omitempty"`
	NotConfirmed *int64 `json:"not_confirmed,omitempty"`
	Replaced     *int64 `json:"replaced,omitempty"`
}

// PostEventsJSONBody defines parameters for PostEvents.
type PostEventsJSONBody struct {
	Date  *time.Time `json:"date,omitempty"`
	Title *string    `json:"title,omitempty"`
}

// PostEventsJSONRequestBody defines body for PostEvents for application/json ContentType.
type PostEventsJSONRequestBody PostEventsJSONBody

// PostEventsEventIdParticipantsJSONRequestBody defines body for PostEventsEventIdParticipants for application/json ContentType.
type PostEventsEventIdParticipantsJSONRequestBody = Person

// PostParticipantsParticipantIdCheckInJSONRequestBody defines body for PostParticipantsParticipantIdCheckIn for application/json ContentType.
type PostParticipantsParticipantIdCheckInJSONRequestBody = Nullable

// PostParticipantsParticipantIdConfirmJSONRequestBody defines body for PostParticipantsParticipantIdConfirm for application/json ContentType.
type PostParticipantsParticipantIdConfirmJSONRequestBody = Nullable

// PostParticipantsParticipantIdReplacementJSONRequestBody defines body for PostParticipantsParticipantIdReplacement for application/json ContentType.
type PostParticipantsParticipantIdReplacementJSONRequestBody = Replacement

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get events list
	// (GET /events)
	GetEvents(ctx echo.Context) error
	// Create new event
	// (POST /events)
	PostEvents(ctx echo.Context) error
	// Delete event
	// (DELETE /events/{event_id})
	DeleteEventsEventId(ctx echo.Context, eventId int64) error
	// Get event
	// (GET /events/{event_id})
	GetEventsEventId(ctx echo.Context, eventId int64) error
	// Get participants list
	// (GET /events/{event_id}/participants)
	GetEventsEventIdParticipants(ctx echo.Context, eventId int64) error
	// Create new participant
	// (POST /events/{event_id}/participants)
	PostEventsEventIdParticipants(ctx echo.Context, eventId int64) error
	// Delete participant
	// (DELETE /participants/{participant_id})
	DeleteParticipantsParticipantId(ctx echo.Context, participantId int64) error
	// Get participant
	// (GET /participants/{participant_id})
	GetParticipantsParticipantId(ctx echo.Context, participantId int64) error
	// Setup check-in
	// (POST /participants/{participant_id}/check-in)
	PostParticipantsParticipantIdCheckIn(ctx echo.Context, participantId int64) error
	// Setup confirm
	// (POST /participants/{participant_id}/confirm)
	PostParticipantsParticipantIdConfirm(ctx echo.Context, participantId int64) error
	// Setup replacement
	// (POST /participants/{participant_id}/replacement)
	PostParticipantsParticipantIdReplacement(ctx echo.Context, participantId int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvents(ctx)
	return err
}

// PostEvents converts echo context to params.
func (w *ServerInterfaceWrapper) PostEvents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEvents(ctx)
	return err
}

// DeleteEventsEventId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEventsEventId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event_id" -------------
	var eventId int64

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", ctx.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEventsEventId(ctx, eventId)
	return err
}

// GetEventsEventId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventsEventId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event_id" -------------
	var eventId int64

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", ctx.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventsEventId(ctx, eventId)
	return err
}

// GetEventsEventIdParticipants converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventsEventIdParticipants(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event_id" -------------
	var eventId int64

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", ctx.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventsEventIdParticipants(ctx, eventId)
	return err
}

// PostEventsEventIdParticipants converts echo context to params.
func (w *ServerInterfaceWrapper) PostEventsEventIdParticipants(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event_id" -------------
	var eventId int64

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", ctx.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEventsEventIdParticipants(ctx, eventId)
	return err
}

// DeleteParticipantsParticipantId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipantsParticipantId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participant_id" -------------
	var participantId int64

	err = runtime.BindStyledParameterWithOptions("simple", "participant_id", ctx.Param("participant_id"), &participantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participant_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteParticipantsParticipantId(ctx, participantId)
	return err
}

// GetParticipantsParticipantId converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipantsParticipantId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participant_id" -------------
	var participantId int64

	err = runtime.BindStyledParameterWithOptions("simple", "participant_id", ctx.Param("participant_id"), &participantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participant_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipantsParticipantId(ctx, participantId)
	return err
}

// PostParticipantsParticipantIdCheckIn converts echo context to params.
func (w *ServerInterfaceWrapper) PostParticipantsParticipantIdCheckIn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participant_id" -------------
	var participantId int64

	err = runtime.BindStyledParameterWithOptions("simple", "participant_id", ctx.Param("participant_id"), &participantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participant_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostParticipantsParticipantIdCheckIn(ctx, participantId)
	return err
}

// PostParticipantsParticipantIdConfirm converts echo context to params.
func (w *ServerInterfaceWrapper) PostParticipantsParticipantIdConfirm(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participant_id" -------------
	var participantId int64

	err = runtime.BindStyledParameterWithOptions("simple", "participant_id", ctx.Param("participant_id"), &participantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participant_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostParticipantsParticipantIdConfirm(ctx, participantId)
	return err
}

// PostParticipantsParticipantIdReplacement converts echo context to params.
func (w *ServerInterfaceWrapper) PostParticipantsParticipantIdReplacement(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participant_id" -------------
	var participantId int64

	err = runtime.BindStyledParameterWithOptions("simple", "participant_id", ctx.Param("participant_id"), &participantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participant_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostParticipantsParticipantIdReplacement(ctx, participantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/events", wrapper.GetEvents)
	router.POST(baseURL+"/events", wrapper.PostEvents)
	router.DELETE(baseURL+"/events/:event_id", wrapper.DeleteEventsEventId)
	router.GET(baseURL+"/events/:event_id", wrapper.GetEventsEventId)
	router.GET(baseURL+"/events/:event_id/participants", wrapper.GetEventsEventIdParticipants)
	router.POST(baseURL+"/events/:event_id/participants", wrapper.PostEventsEventIdParticipants)
	router.DELETE(baseURL+"/participants/:participant_id", wrapper.DeleteParticipantsParticipantId)
	router.GET(baseURL+"/participants/:participant_id", wrapper.GetParticipantsParticipantId)
	router.POST(baseURL+"/participants/:participant_id/check-in", wrapper.PostParticipantsParticipantIdCheckIn)
	router.POST(baseURL+"/participants/:participant_id/confirm", wrapper.PostParticipantsParticipantIdConfirm)
	router.POST(baseURL+"/participants/:participant_id/replacement", wrapper.PostParticipantsParticipantIdReplacement)

}
