// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/xabsvoid/eis/internal/app/domain/model/entity"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CreateEvent provides a mock function with given fields: ctx, event
func (_m *MockRepository) CreateEvent(ctx context.Context, event entity.Event) (entity.Event, error) {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Event) (entity.Event, error)); ok {
		return rf(ctx, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Event) entity.Event); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(entity.Event)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type MockRepository_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event entity.Event
func (_e *MockRepository_Expecter) CreateEvent(ctx interface{}, event interface{}) *MockRepository_CreateEvent_Call {
	return &MockRepository_CreateEvent_Call{Call: _e.mock.On("CreateEvent", ctx, event)}
}

func (_c *MockRepository_CreateEvent_Call) Run(run func(ctx context.Context, event entity.Event)) *MockRepository_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Event))
	})
	return _c
}

func (_c *MockRepository_CreateEvent_Call) Return(_a0 entity.Event, _a1 error) *MockRepository_CreateEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateEvent_Call) RunAndReturn(run func(context.Context, entity.Event) (entity.Event, error)) *MockRepository_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateParticipant provides a mock function with given fields: ctx, participant
func (_m *MockRepository) CreateParticipant(ctx context.Context, participant entity.Participant) (entity.Participant, error) {
	ret := _m.Called(ctx, participant)

	if len(ret) == 0 {
		panic("no return value specified for CreateParticipant")
	}

	var r0 entity.Participant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Participant) (entity.Participant, error)); ok {
		return rf(ctx, participant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Participant) entity.Participant); ok {
		r0 = rf(ctx, participant)
	} else {
		r0 = ret.Get(0).(entity.Participant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Participant) error); ok {
		r1 = rf(ctx, participant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateParticipant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateParticipant'
type MockRepository_CreateParticipant_Call struct {
	*mock.Call
}

// CreateParticipant is a helper method to define mock.On call
//   - ctx context.Context
//   - participant entity.Participant
func (_e *MockRepository_Expecter) CreateParticipant(ctx interface{}, participant interface{}) *MockRepository_CreateParticipant_Call {
	return &MockRepository_CreateParticipant_Call{Call: _e.mock.On("CreateParticipant", ctx, participant)}
}

func (_c *MockRepository_CreateParticipant_Call) Run(run func(ctx context.Context, participant entity.Participant)) *MockRepository_CreateParticipant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Participant))
	})
	return _c
}

func (_c *MockRepository_CreateParticipant_Call) Return(_a0 entity.Participant, _a1 error) *MockRepository_CreateParticipant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateParticipant_Call) RunAndReturn(run func(context.Context, entity.Participant) (entity.Participant, error)) *MockRepository_CreateParticipant_Call {
	_c.Call.Return(run)
	return _c
}

// CreateParticipantCheckIn provides a mock function with given fields: ctx, participantID
func (_m *MockRepository) CreateParticipantCheckIn(ctx context.Context, participantID int64) error {
	ret := _m.Called(ctx, participantID)

	if len(ret) == 0 {
		panic("no return value specified for CreateParticipantCheckIn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, participantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_CreateParticipantCheckIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateParticipantCheckIn'
type MockRepository_CreateParticipantCheckIn_Call struct {
	*mock.Call
}

// CreateParticipantCheckIn is a helper method to define mock.On call
//   - ctx context.Context
//   - participantID int64
func (_e *MockRepository_Expecter) CreateParticipantCheckIn(ctx interface{}, participantID interface{}) *MockRepository_CreateParticipantCheckIn_Call {
	return &MockRepository_CreateParticipantCheckIn_Call{Call: _e.mock.On("CreateParticipantCheckIn", ctx, participantID)}
}

func (_c *MockRepository_CreateParticipantCheckIn_Call) Run(run func(ctx context.Context, participantID int64)) *MockRepository_CreateParticipantCheckIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_CreateParticipantCheckIn_Call) Return(_a0 error) *MockRepository_CreateParticipantCheckIn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_CreateParticipantCheckIn_Call) RunAndReturn(run func(context.Context, int64) error) *MockRepository_CreateParticipantCheckIn_Call {
	_c.Call.Return(run)
	return _c
}

// CreateParticipantConfirmation provides a mock function with given fields: ctx, participantID
func (_m *MockRepository) CreateParticipantConfirmation(ctx context.Context, participantID int64) error {
	ret := _m.Called(ctx, participantID)

	if len(ret) == 0 {
		panic("no return value specified for CreateParticipantConfirmation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, participantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_CreateParticipantConfirmation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateParticipantConfirmation'
type MockRepository_CreateParticipantConfirmation_Call struct {
	*mock.Call
}

// CreateParticipantConfirmation is a helper method to define mock.On call
//   - ctx context.Context
//   - participantID int64
func (_e *MockRepository_Expecter) CreateParticipantConfirmation(ctx interface{}, participantID interface{}) *MockRepository_CreateParticipantConfirmation_Call {
	return &MockRepository_CreateParticipantConfirmation_Call{Call: _e.mock.On("CreateParticipantConfirmation", ctx, participantID)}
}

func (_c *MockRepository_CreateParticipantConfirmation_Call) Run(run func(ctx context.Context, participantID int64)) *MockRepository_CreateParticipantConfirmation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_CreateParticipantConfirmation_Call) Return(_a0 error) *MockRepository_CreateParticipantConfirmation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_CreateParticipantConfirmation_Call) RunAndReturn(run func(context.Context, int64) error) *MockRepository_CreateParticipantConfirmation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateParticipantReplacement provides a mock function with given fields: ctx, participantID, personID
func (_m *MockRepository) CreateParticipantReplacement(ctx context.Context, participantID int64, personID int64) error {
	ret := _m.Called(ctx, participantID, personID)

	if len(ret) == 0 {
		panic("no return value specified for CreateParticipantReplacement")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, participantID, personID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_CreateParticipantReplacement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateParticipantReplacement'
type MockRepository_CreateParticipantReplacement_Call struct {
	*mock.Call
}

// CreateParticipantReplacement is a helper method to define mock.On call
//   - ctx context.Context
//   - participantID int64
//   - personID int64
func (_e *MockRepository_Expecter) CreateParticipantReplacement(ctx interface{}, participantID interface{}, personID interface{}) *MockRepository_CreateParticipantReplacement_Call {
	return &MockRepository_CreateParticipantReplacement_Call{Call: _e.mock.On("CreateParticipantReplacement", ctx, participantID, personID)}
}

func (_c *MockRepository_CreateParticipantReplacement_Call) Run(run func(ctx context.Context, participantID int64, personID int64)) *MockRepository_CreateParticipantReplacement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockRepository_CreateParticipantReplacement_Call) Return(_a0 error) *MockRepository_CreateParticipantReplacement_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_CreateParticipantReplacement_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockRepository_CreateParticipantReplacement_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePerson provides a mock function with given fields: ctx, person
func (_m *MockRepository) CreatePerson(ctx context.Context, person entity.Person) (entity.Person, error) {
	ret := _m.Called(ctx, person)

	if len(ret) == 0 {
		panic("no return value specified for CreatePerson")
	}

	var r0 entity.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Person) (entity.Person, error)); ok {
		return rf(ctx, person)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Person) entity.Person); ok {
		r0 = rf(ctx, person)
	} else {
		r0 = ret.Get(0).(entity.Person)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Person) error); ok {
		r1 = rf(ctx, person)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreatePerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePerson'
type MockRepository_CreatePerson_Call struct {
	*mock.Call
}

// CreatePerson is a helper method to define mock.On call
//   - ctx context.Context
//   - person entity.Person
func (_e *MockRepository_Expecter) CreatePerson(ctx interface{}, person interface{}) *MockRepository_CreatePerson_Call {
	return &MockRepository_CreatePerson_Call{Call: _e.mock.On("CreatePerson", ctx, person)}
}

func (_c *MockRepository_CreatePerson_Call) Run(run func(ctx context.Context, person entity.Person)) *MockRepository_CreatePerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Person))
	})
	return _c
}

func (_c *MockRepository_CreatePerson_Call) Return(_a0 entity.Person, _a1 error) *MockRepository_CreatePerson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreatePerson_Call) RunAndReturn(run func(context.Context, entity.Person) (entity.Person, error)) *MockRepository_CreatePerson_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEventByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) DeleteEventByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteEventByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEventByID'
type MockRepository_DeleteEventByID_Call struct {
	*mock.Call
}

// DeleteEventByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockRepository_Expecter) DeleteEventByID(ctx interface{}, id interface{}) *MockRepository_DeleteEventByID_Call {
	return &MockRepository_DeleteEventByID_Call{Call: _e.mock.On("DeleteEventByID", ctx, id)}
}

func (_c *MockRepository_DeleteEventByID_Call) Run(run func(ctx context.Context, id int64)) *MockRepository_DeleteEventByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_DeleteEventByID_Call) Return(_a0 error) *MockRepository_DeleteEventByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteEventByID_Call) RunAndReturn(run func(context.Context, int64) error) *MockRepository_DeleteEventByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteParticipantByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) DeleteParticipantByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteParticipantByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteParticipantByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteParticipantByID'
type MockRepository_DeleteParticipantByID_Call struct {
	*mock.Call
}

// DeleteParticipantByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockRepository_Expecter) DeleteParticipantByID(ctx interface{}, id interface{}) *MockRepository_DeleteParticipantByID_Call {
	return &MockRepository_DeleteParticipantByID_Call{Call: _e.mock.On("DeleteParticipantByID", ctx, id)}
}

func (_c *MockRepository_DeleteParticipantByID_Call) Run(run func(ctx context.Context, id int64)) *MockRepository_DeleteParticipantByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_DeleteParticipantByID_Call) Return(_a0 error) *MockRepository_DeleteParticipantByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteParticipantByID_Call) RunAndReturn(run func(context.Context, int64) error) *MockRepository_DeleteParticipantByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteParticipantCheckInByParticipantID provides a mock function with given fields: ctx, participantID
func (_m *MockRepository) DeleteParticipantCheckInByParticipantID(ctx context.Context, participantID int64) error {
	ret := _m.Called(ctx, participantID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteParticipantCheckInByParticipantID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, participantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteParticipantCheckInByParticipantID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteParticipantCheckInByParticipantID'
type MockRepository_DeleteParticipantCheckInByParticipantID_Call struct {
	*mock.Call
}

// DeleteParticipantCheckInByParticipantID is a helper method to define mock.On call
//   - ctx context.Context
//   - participantID int64
func (_e *MockRepository_Expecter) DeleteParticipantCheckInByParticipantID(ctx interface{}, participantID interface{}) *MockRepository_DeleteParticipantCheckInByParticipantID_Call {
	return &MockRepository_DeleteParticipantCheckInByParticipantID_Call{Call: _e.mock.On("DeleteParticipantCheckInByParticipantID", ctx, participantID)}
}

func (_c *MockRepository_DeleteParticipantCheckInByParticipantID_Call) Run(run func(ctx context.Context, participantID int64)) *MockRepository_DeleteParticipantCheckInByParticipantID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_DeleteParticipantCheckInByParticipantID_Call) Return(_a0 error) *MockRepository_DeleteParticipantCheckInByParticipantID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteParticipantCheckInByParticipantID_Call) RunAndReturn(run func(context.Context, int64) error) *MockRepository_DeleteParticipantCheckInByParticipantID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteParticipantConfirmationByParticipantID provides a mock function with given fields: ctx, participantID
func (_m *MockRepository) DeleteParticipantConfirmationByParticipantID(ctx context.Context, participantID int64) error {
	ret := _m.Called(ctx, participantID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteParticipantConfirmationByParticipantID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, participantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteParticipantConfirmationByParticipantID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteParticipantConfirmationByParticipantID'
type MockRepository_DeleteParticipantConfirmationByParticipantID_Call struct {
	*mock.Call
}

// DeleteParticipantConfirmationByParticipantID is a helper method to define mock.On call
//   - ctx context.Context
//   - participantID int64
func (_e *MockRepository_Expecter) DeleteParticipantConfirmationByParticipantID(ctx interface{}, participantID interface{}) *MockRepository_DeleteParticipantConfirmationByParticipantID_Call {
	return &MockRepository_DeleteParticipantConfirmationByParticipantID_Call{Call: _e.mock.On("DeleteParticipantConfirmationByParticipantID", ctx, participantID)}
}

func (_c *MockRepository_DeleteParticipantConfirmationByParticipantID_Call) Run(run func(ctx context.Context, participantID int64)) *MockRepository_DeleteParticipantConfirmationByParticipantID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_DeleteParticipantConfirmationByParticipantID_Call) Return(_a0 error) *MockRepository_DeleteParticipantConfirmationByParticipantID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteParticipantConfirmationByParticipantID_Call) RunAndReturn(run func(context.Context, int64) error) *MockRepository_DeleteParticipantConfirmationByParticipantID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteParticipantReplacementByParticipantID provides a mock function with given fields: ctx, participantID
func (_m *MockRepository) DeleteParticipantReplacementByParticipantID(ctx context.Context, participantID int64) error {
	ret := _m.Called(ctx, participantID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteParticipantReplacementByParticipantID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, participantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteParticipantReplacementByParticipantID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteParticipantReplacementByParticipantID'
type MockRepository_DeleteParticipantReplacementByParticipantID_Call struct {
	*mock.Call
}

// DeleteParticipantReplacementByParticipantID is a helper method to define mock.On call
//   - ctx context.Context
//   - participantID int64
func (_e *MockRepository_Expecter) DeleteParticipantReplacementByParticipantID(ctx interface{}, participantID interface{}) *MockRepository_DeleteParticipantReplacementByParticipantID_Call {
	return &MockRepository_DeleteParticipantReplacementByParticipantID_Call{Call: _e.mock.On("DeleteParticipantReplacementByParticipantID", ctx, participantID)}
}

func (_c *MockRepository_DeleteParticipantReplacementByParticipantID_Call) Run(run func(ctx context.Context, participantID int64)) *MockRepository_DeleteParticipantReplacementByParticipantID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_DeleteParticipantReplacementByParticipantID_Call) Return(_a0 error) *MockRepository_DeleteParticipantReplacementByParticipantID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteParticipantReplacementByParticipantID_Call) RunAndReturn(run func(context.Context, int64) error) *MockRepository_DeleteParticipantReplacementByParticipantID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetEventByID(ctx context.Context, id int64) (entity.Event, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEventByID")
	}

	var r0 entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.Event, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.Event); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Event)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetEventByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventByID'
type MockRepository_GetEventByID_Call struct {
	*mock.Call
}

// GetEventByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockRepository_Expecter) GetEventByID(ctx interface{}, id interface{}) *MockRepository_GetEventByID_Call {
	return &MockRepository_GetEventByID_Call{Call: _e.mock.On("GetEventByID", ctx, id)}
}

func (_c *MockRepository_GetEventByID_Call) Run(run func(ctx context.Context, id int64)) *MockRepository_GetEventByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_GetEventByID_Call) Return(_a0 entity.Event, _a1 error) *MockRepository_GetEventByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetEventByID_Call) RunAndReturn(run func(context.Context, int64) (entity.Event, error)) *MockRepository_GetEventByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvents provides a mock function with given fields: ctx
func (_m *MockRepository) GetEvents(ctx context.Context) ([]entity.Event, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 []entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Event, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Event); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type MockRepository_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) GetEvents(ctx interface{}) *MockRepository_GetEvents_Call {
	return &MockRepository_GetEvents_Call{Call: _e.mock.On("GetEvents", ctx)}
}

func (_c *MockRepository_GetEvents_Call) Run(run func(ctx context.Context)) *MockRepository_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_GetEvents_Call) Return(_a0 []entity.Event, _a1 error) *MockRepository_GetEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetEvents_Call) RunAndReturn(run func(context.Context) ([]entity.Event, error)) *MockRepository_GetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetParticipantByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetParticipantByID(ctx context.Context, id int64) (entity.Participant, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetParticipantByID")
	}

	var r0 entity.Participant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.Participant, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.Participant); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Participant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetParticipantByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParticipantByID'
type MockRepository_GetParticipantByID_Call struct {
	*mock.Call
}

// GetParticipantByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockRepository_Expecter) GetParticipantByID(ctx interface{}, id interface{}) *MockRepository_GetParticipantByID_Call {
	return &MockRepository_GetParticipantByID_Call{Call: _e.mock.On("GetParticipantByID", ctx, id)}
}

func (_c *MockRepository_GetParticipantByID_Call) Run(run func(ctx context.Context, id int64)) *MockRepository_GetParticipantByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_GetParticipantByID_Call) Return(_a0 entity.Participant, _a1 error) *MockRepository_GetParticipantByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetParticipantByID_Call) RunAndReturn(run func(context.Context, int64) (entity.Participant, error)) *MockRepository_GetParticipantByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetParticipantsByEventID provides a mock function with given fields: ctx, eventID
func (_m *MockRepository) GetParticipantsByEventID(ctx context.Context, eventID int64) ([]entity.Participant, error) {
	ret := _m.Called(ctx, eventID)

	if len(ret) == 0 {
		panic("no return value specified for GetParticipantsByEventID")
	}

	var r0 []entity.Participant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]entity.Participant, error)); ok {
		return rf(ctx, eventID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.Participant); ok {
		r0 = rf(ctx, eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Participant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetParticipantsByEventID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParticipantsByEventID'
type MockRepository_GetParticipantsByEventID_Call struct {
	*mock.Call
}

// GetParticipantsByEventID is a helper method to define mock.On call
//   - ctx context.Context
//   - eventID int64
func (_e *MockRepository_Expecter) GetParticipantsByEventID(ctx interface{}, eventID interface{}) *MockRepository_GetParticipantsByEventID_Call {
	return &MockRepository_GetParticipantsByEventID_Call{Call: _e.mock.On("GetParticipantsByEventID", ctx, eventID)}
}

func (_c *MockRepository_GetParticipantsByEventID_Call) Run(run func(ctx context.Context, eventID int64)) *MockRepository_GetParticipantsByEventID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_GetParticipantsByEventID_Call) Return(_a0 []entity.Participant, _a1 error) *MockRepository_GetParticipantsByEventID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetParticipantsByEventID_Call) RunAndReturn(run func(context.Context, int64) ([]entity.Participant, error)) *MockRepository_GetParticipantsByEventID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonsByIDs provides a mock function with given fields: ctx, ids
func (_m *MockRepository) GetPersonsByIDs(ctx context.Context, ids []int64) ([]entity.Person, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonsByIDs")
	}

	var r0 []entity.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]entity.Person, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []entity.Person); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetPersonsByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonsByIDs'
type MockRepository_GetPersonsByIDs_Call struct {
	*mock.Call
}

// GetPersonsByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []int64
func (_e *MockRepository_Expecter) GetPersonsByIDs(ctx interface{}, ids interface{}) *MockRepository_GetPersonsByIDs_Call {
	return &MockRepository_GetPersonsByIDs_Call{Call: _e.mock.On("GetPersonsByIDs", ctx, ids)}
}

func (_c *MockRepository_GetPersonsByIDs_Call) Run(run func(ctx context.Context, ids []int64)) *MockRepository_GetPersonsByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockRepository_GetPersonsByIDs_Call) Return(_a0 []entity.Person, _a1 error) *MockRepository_GetPersonsByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetPersonsByIDs_Call) RunAndReturn(run func(context.Context, []int64) ([]entity.Person, error)) *MockRepository_GetPersonsByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
